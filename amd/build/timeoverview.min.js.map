{"version":3,"file":"timeoverview.min.js","sources":["../src/timeoverview.js"],"sourcesContent":["import Templates from 'core/templates';\nimport Widget from 'lytix_helper/widget';\nimport PercentRounder from 'lytix_helper/percent_rounder';\n\n/**\n * Main function for this module.\n * @param {number} contextid\n * @param {number} courseid\n * @param {string} containerid\n */\nexport const init = (contextid, courseid, containerid) => {\n\n    const WIDGET_ID = containerid ?? 'timeoverview';\n\n    const dataPromise = Widget.getData(\n        'local_lytix_lytix_timeoverview_timeoverview_get',\n        {contextid: contextid, courseid: courseid}\n    )\n    .then(data => {\n        const\n            activities = data.Activities,\n            length = activities.length;\n        for (let i = 0; i < length; ++i) {\n            if (activities[i].MedianTime > 0) {\n                return data;\n            }\n        }\n        throw new Widget.NoDataError();\n    });\n\n    // XXX: The indeces have to match!\n    const stringsPromise = Widget.getStrings({\n        lytix_timeoverview: { // eslint-disable-line camelcase\n            identical: [\n                'resource',\n                'video',\n                'forum',\n                'course',\n                'quiz',\n                'grade',\n                'submission',\n                'feedback',\n            ],\n        }\n    });\n\n    Promise.all([stringsPromise, dataPromise])\n    .then(values => {\n        const\n            strings = values[0],\n            data = values[1],\n            activities = data.Activities,\n            context = { data: [] },\n            length = activities.length,\n            rounder = new PercentRounder();\n\n        for (let i = 0; i < length; ++i) {\n            const activity = activities[i];\n            if (activity.MedianTime <= 0) {\n                continue;\n            }\n\n            const activityType = activity.Type.toLowerCase();\n            context.data.push({\n                activity: activityType,\n                label: strings[activityType],\n                percent: rounder.round(activity.MedianTime * 100),\n            });\n        }\n\n        return Templates.render('lytix_timeoverview/timeoverview', context);\n    })\n    .then(html => {\n        Widget.getContentContainer(WIDGET_ID).insertAdjacentHTML('beforeend', html);\n        return;\n    })\n    .finally(() => {\n        document.getElementById(WIDGET_ID).classList.remove('loading');\n    })\n    .catch(error => Widget.handleError(error, WIDGET_ID));\n};\n"],"names":["contextid","courseid","containerid","WIDGET_ID","dataPromise","Widget","getData","then","data","activities","Activities","length","i","MedianTime","NoDataError","stringsPromise","getStrings","lytix_timeoverview","identical","Promise","all","values","strings","context","rounder","PercentRounder","activity","activityType","Type","toLowerCase","push","label","percent","round","Templates","render","html","getContentContainer","insertAdjacentHTML","finally","document","getElementById","classList","remove","catch","error","handleError"],"mappings":"gfAUoB,CAACA,UAAWC,SAAUC,qBAEhCC,UAAYD,aAAe,eAE3BE,YAAcC,gBAAOC,QACvB,kDACA,CAACN,UAAWA,UAAWC,SAAUA,WAEpCM,MAAKC,aAEEC,WAAaD,KAAKE,WAClBC,OAASF,WAAWE,WACnB,IAAIC,EAAI,EAAGA,EAAID,SAAUC,KACtBH,WAAWG,GAAGC,WAAa,SACpBL,WAGT,IAAIH,gBAAOS,eAIfC,eAAiBV,gBAAOW,WAAW,CACrCC,mBAAoB,CAChBC,UAAW,CACP,WACA,QACA,QACA,SACA,OACA,QACA,aACA,eAKZC,QAAQC,IAAI,CAACL,eAAgBX,cAC5BG,MAAKc,eAEEC,QAAUD,OAAO,GAEjBZ,WADOY,OAAO,GACIX,WAClBa,QAAU,CAAEf,KAAM,IAClBG,OAASF,WAAWE,OACpBa,QAAU,IAAIC,6BAEb,IAAIb,EAAI,EAAGA,EAAID,SAAUC,EAAG,OACvBc,SAAWjB,WAAWG,MACxBc,SAASb,YAAc,iBAIrBc,aAAeD,SAASE,KAAKC,cACnCN,QAAQf,KAAKsB,KAAK,CACdJ,SAAUC,aACVI,MAAOT,QAAQK,cACfK,QAASR,QAAQS,MAA4B,IAAtBP,SAASb,qBAIjCqB,mBAAUC,OAAO,kCAAmCZ,YAE9DhB,MAAK6B,uBACKC,oBAAoBlC,WAAWmC,mBAAmB,YAAaF,SAGzEG,SAAQ,KACLC,SAASC,eAAetC,WAAWuC,UAAUC,OAAO,cAEvDC,OAAMC,OAASxC,gBAAOyC,YAAYD,MAAO1C"}